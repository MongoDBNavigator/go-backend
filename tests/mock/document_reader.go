// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/MongoDBNavigator/go-backend/domain/database/repository (interfaces: DocumentReader)

// Package mock is a generated GoMock package.
package mock

import (
	value "github.com/MongoDBNavigator/go-backend/domain/database/value"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDocumentReader is a mock of DocumentReader interface
type MockDocumentReader struct {
	ctrl     *gomock.Controller
	recorder *MockDocumentReaderMockRecorder
}

// MockDocumentReaderMockRecorder is the mock recorder for MockDocumentReader
type MockDocumentReaderMockRecorder struct {
	mock *MockDocumentReader
}

// NewMockDocumentReader creates a new mock instance
func NewMockDocumentReader(ctrl *gomock.Controller) *MockDocumentReader {
	mock := &MockDocumentReader{ctrl: ctrl}
	mock.recorder = &MockDocumentReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDocumentReader) EXPECT() *MockDocumentReaderMockRecorder {
	return m.recorder
}

// Read mocks base method
func (m *MockDocumentReader) Read(arg0 value.DBName, arg1 value.CollName, arg2 value.DocId) (interface{}, error) {
	ret := m.ctrl.Call(m, "Read", arg0, arg1, arg2)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockDocumentReaderMockRecorder) Read(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockDocumentReader)(nil).Read), arg0, arg1, arg2)
}

// ReadAll mocks base method
func (m *MockDocumentReader) ReadAll(arg0 *value.ReadAllDocConditions) ([]interface{}, error) {
	ret := m.ctrl.Call(m, "ReadAll", arg0)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAll indicates an expected call of ReadAll
func (mr *MockDocumentReaderMockRecorder) ReadAll(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAll", reflect.TypeOf((*MockDocumentReader)(nil).ReadAll), arg0)
}

// ReadCount mocks base method
func (m *MockDocumentReader) ReadCount(arg0 *value.ReadAllDocConditions) (int, error) {
	ret := m.ctrl.Call(m, "ReadCount", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadCount indicates an expected call of ReadCount
func (mr *MockDocumentReaderMockRecorder) ReadCount(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCount", reflect.TypeOf((*MockDocumentReader)(nil).ReadCount), arg0)
}
