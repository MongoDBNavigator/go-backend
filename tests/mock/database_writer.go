// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/MongoDBNavigator/go-backend/domain/database/repository (interfaces: DatabaseWriter)

// Package mock is a generated GoMock package.
package mock

import (
	value "github.com/MongoDBNavigator/go-backend/domain/database/value"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDatabaseWriter is a mock of DatabaseWriter interface
type MockDatabaseWriter struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseWriterMockRecorder
}

// MockDatabaseWriterMockRecorder is the mock recorder for MockDatabaseWriter
type MockDatabaseWriterMockRecorder struct {
	mock *MockDatabaseWriter
}

// NewMockDatabaseWriter creates a new mock instance
func NewMockDatabaseWriter(ctrl *gomock.Controller) *MockDatabaseWriter {
	mock := &MockDatabaseWriter{ctrl: ctrl}
	mock.recorder = &MockDatabaseWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabaseWriter) EXPECT() *MockDatabaseWriterMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockDatabaseWriter) Create(arg0 value.DBName) error {
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockDatabaseWriterMockRecorder) Create(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDatabaseWriter)(nil).Create), arg0)
}

// Delete mocks base method
func (m *MockDatabaseWriter) Delete(arg0 value.DBName) error {
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockDatabaseWriterMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDatabaseWriter)(nil).Delete), arg0)
}
