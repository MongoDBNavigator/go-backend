// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/MongoDBNavigator/go-backend/domain/database/repository (interfaces: DocumentWriter)

// Package mock is a generated GoMock package.
package mock

import (
	value "github.com/MongoDBNavigator/go-backend/domain/database/value"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDocumentWriter is a mock of DocumentWriter interface
type MockDocumentWriter struct {
	ctrl     *gomock.Controller
	recorder *MockDocumentWriterMockRecorder
}

// MockDocumentWriterMockRecorder is the mock recorder for MockDocumentWriter
type MockDocumentWriterMockRecorder struct {
	mock *MockDocumentWriter
}

// NewMockDocumentWriter creates a new mock instance
func NewMockDocumentWriter(ctrl *gomock.Controller) *MockDocumentWriter {
	mock := &MockDocumentWriter{ctrl: ctrl}
	mock.recorder = &MockDocumentWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDocumentWriter) EXPECT() *MockDocumentWriterMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockDocumentWriter) Create(arg0 value.DBName, arg1 value.CollName, arg2 []byte) error {
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockDocumentWriterMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDocumentWriter)(nil).Create), arg0, arg1, arg2)
}

// Delete mocks base method
func (m *MockDocumentWriter) Delete(arg0 value.DBName, arg1 value.CollName, arg2 value.DocId) error {
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockDocumentWriterMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDocumentWriter)(nil).Delete), arg0, arg1, arg2)
}

// Update mocks base method
func (m *MockDocumentWriter) Update(arg0 value.DBName, arg1 value.CollName, arg2 value.DocId, arg3 []byte) error {
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockDocumentWriterMockRecorder) Update(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDocumentWriter)(nil).Update), arg0, arg1, arg2, arg3)
}
