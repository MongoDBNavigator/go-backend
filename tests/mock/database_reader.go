// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/MongoDBNavigator/go-backend/domain/database/repository (interfaces: DatabaseReader)

// Package mock is a generated GoMock package.
package mock

import (
	model "github.com/MongoDBNavigator/go-backend/domain/database/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDatabaseReader is a mock of DatabaseReader interface
type MockDatabaseReader struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseReaderMockRecorder
}

// MockDatabaseReaderMockRecorder is the mock recorder for MockDatabaseReader
type MockDatabaseReaderMockRecorder struct {
	mock *MockDatabaseReader
}

// NewMockDatabaseReader creates a new mock instance
func NewMockDatabaseReader(ctrl *gomock.Controller) *MockDatabaseReader {
	mock := &MockDatabaseReader{ctrl: ctrl}
	mock.recorder = &MockDatabaseReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabaseReader) EXPECT() *MockDatabaseReaderMockRecorder {
	return m.recorder
}

// ReadAll mocks base method
func (m *MockDatabaseReader) ReadAll() ([]*model.Database, error) {
	ret := m.ctrl.Call(m, "ReadAll")
	ret0, _ := ret[0].([]*model.Database)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAll indicates an expected call of ReadAll
func (mr *MockDatabaseReaderMockRecorder) ReadAll() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAll", reflect.TypeOf((*MockDatabaseReader)(nil).ReadAll))
}
