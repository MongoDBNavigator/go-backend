// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/MongoDBNavigator/go-backend/domain/database/repository (interfaces: CollectionReader)

// Package mock is a generated GoMock package.
package mock

import (
	model "github.com/MongoDBNavigator/go-backend/domain/database/model"
	value "github.com/MongoDBNavigator/go-backend/domain/database/value"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCollectionReader is a mock of CollectionReader interface
type MockCollectionReader struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionReaderMockRecorder
}

// MockCollectionReaderMockRecorder is the mock recorder for MockCollectionReader
type MockCollectionReaderMockRecorder struct {
	mock *MockCollectionReader
}

// NewMockCollectionReader creates a new mock instance
func NewMockCollectionReader(ctrl *gomock.Controller) *MockCollectionReader {
	mock := &MockCollectionReader{ctrl: ctrl}
	mock.recorder = &MockCollectionReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCollectionReader) EXPECT() *MockCollectionReaderMockRecorder {
	return m.recorder
}

// ReadAll mocks base method
func (m *MockCollectionReader) ReadAll(arg0 value.DBName) ([]*model.Collection, error) {
	ret := m.ctrl.Call(m, "ReadAll", arg0)
	ret0, _ := ret[0].([]*model.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAll indicates an expected call of ReadAll
func (mr *MockCollectionReaderMockRecorder) ReadAll(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAll", reflect.TypeOf((*MockCollectionReader)(nil).ReadAll), arg0)
}
