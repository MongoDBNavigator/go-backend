// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/MongoDBNavigator/go-backend/domain/database/repository (interfaces: IndexReader)

// Package mock is a generated GoMock package.
package mock

import (
	model "github.com/MongoDBNavigator/go-backend/domain/database/model"
	value "github.com/MongoDBNavigator/go-backend/domain/database/value"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIndexReader is a mock of IndexReader interface
type MockIndexReader struct {
	ctrl     *gomock.Controller
	recorder *MockIndexReaderMockRecorder
}

// MockIndexReaderMockRecorder is the mock recorder for MockIndexReader
type MockIndexReaderMockRecorder struct {
	mock *MockIndexReader
}

// NewMockIndexReader creates a new mock instance
func NewMockIndexReader(ctrl *gomock.Controller) *MockIndexReader {
	mock := &MockIndexReader{ctrl: ctrl}
	mock.recorder = &MockIndexReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIndexReader) EXPECT() *MockIndexReaderMockRecorder {
	return m.recorder
}

// ReadAll mocks base method
func (m *MockIndexReader) ReadAll(arg0 value.DBName, arg1 value.CollName) ([]*model.Index, error) {
	ret := m.ctrl.Call(m, "ReadAll", arg0, arg1)
	ret0, _ := ret[0].([]*model.Index)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAll indicates an expected call of ReadAll
func (mr *MockIndexReaderMockRecorder) ReadAll(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAll", reflect.TypeOf((*MockIndexReader)(nil).ReadAll), arg0, arg1)
}
